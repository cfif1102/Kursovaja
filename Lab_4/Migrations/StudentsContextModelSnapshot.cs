// <auto-generated />
using System;
using Lab_4.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab_4.Migrations
{
    [DbContext(typeof(StudentsContext))]
    partial class StudentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab_4.AdmissionApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Application_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<int?>("AdmissionsOfficerId")
                        .HasColumnType("int")
                        .HasColumnName("Admissions_Officer_ID");

                    b.Property<int?>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("date")
                        .HasColumnName("Application_Date");

                    b.Property<string>("OtherDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Other_Details");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("Specialty_ID");

                    b.HasKey("ApplicationId")
                        .HasName("PK__Admissio__E063E1CBFDF99D16");

                    b.HasIndex("AdmissionsOfficerId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Admission_Applications", (string)null);
                });

            modelBuilder.Entity("Lab_4.AdmissionPlan", b =>
                {
                    b.Property<int>("AdmissionPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Admission_Plan_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionPlanId"));

                    b.Property<int?>("NumberOfSeats")
                        .HasColumnType("int")
                        .HasColumnName("Number_of_Seats");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("Specialty_ID");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("AdmissionPlanId")
                        .HasName("PK__Admissio__F9E1BF7D2043216C");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Admission_Plan", (string)null);
                });

            modelBuilder.Entity("Lab_4.AdmissionsOfficer", b =>
                {
                    b.Property<int>("AdmissionsOfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Admissions_Officer_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionsOfficerId"));

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Full_Name");

                    b.HasKey("AdmissionsOfficerId")
                        .HasName("PK__Admissio__FA695646B5B76D8C");

                    b.ToTable("Admissions_Officers", (string)null);
                });

            modelBuilder.Entity("Lab_4.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Applicant_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantId"));

                    b.Property<decimal?>("AverageGrade")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("Average_Grade");

                    b.Property<string>("EducationDocument")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Education_Document");

                    b.Property<int?>("EducationInstitutionId")
                        .HasColumnType("int")
                        .HasColumnName("Education_Institution_ID");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ForeignLanguage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Foreign_Language");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int")
                        .HasColumnName("Graduation_Year");

                    b.Property<string>("IdentificationDocument")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Identification_Document");

                    b.Property<string>("Middlename")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ParentsId")
                        .HasColumnType("int")
                        .HasColumnName("Parents_ID");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ResidentialAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Residential_Address");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ApplicantId")
                        .HasName("PK__Applican__9F991F67C28503A3");

                    b.HasIndex("EducationInstitutionId");

                    b.HasIndex("ParentsId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Lab_4.ApplicantCertificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Certificate_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<int?>("ApplicantId")
                        .HasColumnType("int")
                        .HasColumnName("Applicant_ID");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("CertificateId")
                        .HasName("PK__Applican__3AE412EAA469E17E");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Applicant_Certificates", (string)null);
                });

            modelBuilder.Entity("Lab_4.EducationInstitution", b =>
                {
                    b.Property<int>("EducationInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Education_Institution_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationInstitutionId"));

                    b.Property<string>("InstitutionName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Institution_Name");

                    b.HasKey("EducationInstitutionId")
                        .HasName("PK__Educatio__96E5773A453D8E04");

                    b.ToTable("Education_Institutions", (string)null);
                });

            modelBuilder.Entity("Lab_4.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Faculty_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyId"));

                    b.Property<string>("FacultyName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Faculty_Name");

                    b.HasKey("FacultyId")
                        .HasName("PK__Facultie__4EFCEA4AF894DCFD");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Lab_4.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Lab_4.Parent", b =>
                {
                    b.Property<int>("ParentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Parents_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentsId"));

                    b.Property<string>("Parent1Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Parent1_Name");

                    b.Property<string>("Parent2Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Parent2_Name");

                    b.HasKey("ParentsId")
                        .HasName("PK__Parents__7CBE7523030166E4");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Lab_4.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Specialty_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyId"));

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("Faculty_ID");

                    b.Property<string>("SpecialtyName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Specialty_Name");

                    b.HasKey("SpecialtyId")
                        .HasName("PK__Specialt__0DD46021487829C1");

                    b.HasIndex("FacultyId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Lab_4.AdmissionApplication", b =>
                {
                    b.HasOne("Lab_4.AdmissionsOfficer", "AdmissionsOfficer")
                        .WithMany("AdmissionApplications")
                        .HasForeignKey("AdmissionsOfficerId")
                        .HasConstraintName("FK__Admission__Admis__49C3F6B7");

                    b.HasOne("Lab_4.Applicant", "Applicant")
                        .WithMany("AdmissionApplications")
                        .HasForeignKey("ApplicantId")
                        .HasConstraintName("FK__Admission__Appli__4AB81AF0");

                    b.HasOne("Lab_4.Specialty", "Specialty")
                        .WithMany("AdmissionApplications")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Admission__Speci__48CFD27E");

                    b.Navigation("AdmissionsOfficer");

                    b.Navigation("Applicant");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Lab_4.AdmissionPlan", b =>
                {
                    b.HasOne("Lab_4.Specialty", "Specialty")
                        .WithMany("AdmissionPlans")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Admission__Speci__3E52440B");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Lab_4.Applicant", b =>
                {
                    b.HasOne("Lab_4.EducationInstitution", "EducationInstitution")
                        .WithMany("Applicants")
                        .HasForeignKey("EducationInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Applicant__Educa__44FF419A");

                    b.HasOne("Lab_4.Parent", "Parents")
                        .WithMany("Applicants")
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Applicant__Paren__45F365D3");

                    b.Navigation("EducationInstitution");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("Lab_4.ApplicantCertificate", b =>
                {
                    b.HasOne("Lab_4.Applicant", "Applicant")
                        .WithMany("ApplicantCertificates")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Applicant__Appli__4D94879B");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("Lab_4.Specialty", b =>
                {
                    b.HasOne("Lab_4.Faculty", "Faculty")
                        .WithMany("Specialties")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Specialti__Facul__398D8EEE");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Lab_4.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Lab_4.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab_4.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Lab_4.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lab_4.AdmissionsOfficer", b =>
                {
                    b.Navigation("AdmissionApplications");
                });

            modelBuilder.Entity("Lab_4.Applicant", b =>
                {
                    b.Navigation("AdmissionApplications");

                    b.Navigation("ApplicantCertificates");
                });

            modelBuilder.Entity("Lab_4.EducationInstitution", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("Lab_4.Faculty", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("Lab_4.Parent", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("Lab_4.Specialty", b =>
                {
                    b.Navigation("AdmissionApplications");

                    b.Navigation("AdmissionPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
